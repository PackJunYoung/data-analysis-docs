<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Ch 03. numpy" id="1-02-03">

    <chapter title="numpy import 하기">
        <procedure>
            <step>
                <code-block lang="python">
                    import numpy
                </code-block>
                <list>
                    <li>import 구문을 사용하여 numpy 패키지를 가져옵니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    numpy
                </code-block>
                <list>
                    <li>임포트가 정상적으로 진행됬는지 확인하기 위해서는, 패키지 이름을 입력해보면 됩니다.</li>
                    <li>실행 결과로 패키지를 가져온 경로가 출력됩니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="별칭 지정하기">
            <step>
                <code-block lang="python">
                    import numpy as np
                </code-block>
                <list>
                    <li>numpy 역시 자주 사용되는 패키지이기 때문에, 관례적인 별칭이 존재합니다.</li>
                    <li>별칭은 항상 사용해주는 습관을 가지는 것이 좋습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    np
                </code-block>
                <list>
                    <li>이제 np 입력만으로도 실행이 가능합니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>

    <chapter title="ndarray 생성하기">
        <procedure>
            <step>
                <code-block lang="python">
                    arr = np.array([1, 2, 3, 4], dtype=int)
                </code-block>
                <list>
                    <li>np.array 함수를 사용하여 ndarray를 생성할 수 있습니다.</li>
                    <li>ndarray 는 n-dimension array 의 약어입니다.</li>
                    <li>리스트와 달리 ndarray 는 단일 타입을 명시해주어야 합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr
                    # -> array([1, 2, 3, 4])

                    [1, 2, 3, 4]
                    # -> [1, 2, 3, 4]

                    type(arr)
                    # -> numpy.ndarray
                </code-block>
                <list>
                    <li>ndarray 는 리스트와는 다른 형태로 결과가 출력됩니다.</li>
                    <li>type 함수를 통해 ndarray 타입인지 확인할 수 있습니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="리스트로부터 생성하기">
            <step>
                <code-block lang="python">
                    mylist1 = [1, 2, 3, 4]
                    mylist2 = [[1, 2, 3, 4],
                               [5, 6, 7, 8]]
                </code-block>
                <list>
                    <li>ndarray 로 변환할 리스트를 생성합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr1 = np.array(mylist1)
                    arr2 = np.array(mylist2)
                </code-block>
                <list>
                    <li>np.array 함수를 통해 리스트를 ndarray 로 바로 변환할 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr1.shape
                    # -> (4,)

                    arr2.shape
                    # -> (2, 4)
                </code-block>
                <list>
                    <li>소스 리스트와 동일하게 arr1 은 1차원 ndarray 가 되고 arr2 는 2차원 ndarray 로 변환됩니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="array 에서의 data 타입">
            <step>
                <code-block lang="python">
                    mylist = [1, 3.14, '테디', '1234']

                    mylist[1]
                    # -> 3.14

                    mylist[2]
                    # -> '테디'
                </code-block>
                <list>
                    <li>리스트는 타입에 제한이 없이 모든 형식의 값이 요소로 추가될 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr = np.array([1, 2, 3, 3.14])
                    arr
                    # -> array([1. , 2. , 3. , 3.14])
                </code-block>
                <list>
                    <li>리스트와 달리 ndarray 는 요소에 하나의 타입만 설정이 가능합니다.</li>
                    <li>int 와 float 형식의 값이 담긴 리스트를 변환하면, 더 상위 타입인 float 로 타입이 설정됩니다.</li>
                    <li>따라서 모든 요소의 값이 float 타입으로 변환됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr = np.array([1, 3.14, '테디', '1234'])
                    arr
                    # -> array(['1', '3.14', '테디', '1234'])
                </code-block>
                <list>
                    <li>리스트에 문자열이 포함되어 있는 경우, 문자열 타입의 ndarray 로 변환됩니다.</li>
                    <li>모든 요소는 문자열로 변환됩니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="타입이 혼재되었으니, dtype 을 지정한 경우">
            <step>
                <code-block lang="python">
                    arr = np.array([1, 2, 3, 3.14], dtype=int)
                    arr
                    # -> array([1, 2, 3, 3])
                </code-block>
                <list>
                    <li>float 타입이였던 요소는 int 타입으로 강제 변환됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr = np.array([1, 3.14, '테디'], dtype=int)
                    # ValueError
                </code-block>
                <list>
                    <li>문자열이 포함된 리스트를 dtype int 로 지정하면, 변환하지 못하고 에러가 발생합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr = np.array([1, 3.14, '1234'], dtype=int)
                    arr
                    # -> array([1, 3, 1234])
                </code-block>
                <list>
                    <li>문자열의 내용이 숫자로 구성되어 숫자로 변환이 가능하다면, 에러가 발생하지 않습니다.</li>
                    <li>변환된 숫자로 구성된 ndarray 가 생성됩니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>

    <chapter title="슬라이싱 (Slicing)">
        <procedure title="인덱스를 지정하여 색인">
            <step>
                <code-block lang="python">
                    arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
                    arr.shape
                    # -> (10,)
                </code-block>
                <list>
                    <li>1차원 ndarray 를 생성합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr[0]
                    # -> 0

                    arr[5]
                    # -> 5

                    arr[10]
                    # IndexError

                    arr[-1]
                    # -> 9

                    arr[-10]
                    # -> 0

                    arr[-11]
                    # IndexError
                </code-block>
                <list>
                    <li>리스트와 동일하게 인덱스를 통해 요소의 값을 가져올 수 있습니다.</li>
                    <li>크기를 벗어난 인덱스를 요청하면 에러가 발생합니다.</li>
                    <li>음수값 인덱스를 통해서도 접근이 가능합니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="2차원 array">
            <step>
                <code-block lang="python">
                    arr2d = np.array([[1, 2, 3, 4],
                                      [5, 6, 7, 8],
                                      [9, 10, 11, 12]])
                    arr2d.shape
                    # -> (3, 4)
                </code-block>
                <list>
                    <li>2차원 ndarray 를 생성합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr2d[0, 2]
                    # -> 3

                    arr2d[2, 1]
                    # -> 10
                </code-block>
                <list>
                    <li>1차원과 동일하게 인덱스를 통해 요소에 접근할 수 있습니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="범위 색인">
            <step>
                <code-block lang="python">
                    arr[1:]
                    # -> array([1, 2, 3, 4, 5, 6, 7, 8, 9])

                    arr[:5]
                    # -> array([0, 1, 2, 3, 4])

                    arr[1:5]
                    # -> array([1, 2, 3, 4])

                    arr[:-1]
                    # -> array([0, 1, 2, 3, 4, 5, 6, 7, 8])
                </code-block>
                <list>
                    <li>: 를 통해 범위 색인을 지정할 수 있습니다.</li>
                    <li>: 를 기준으로 왼쪽에는 시작 인덱스, 오른쪽에는 끝 인덱스를 지정합니다.</li>
                    <li>시작 인덱스는 결과에 포함되고 끝 인덱스는 결과에 포함되지 않습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr2d[0, :]
                    # -> array([1, 2, 3, 4])

                    arr2d[:, 2]
                    # -> array([3, 7, 11])

                    arr2d[:2, :]
                    # -> array([[1, 2, 3, 4],
                    #           [5, 6, 7, 8]])

                    arr2d[:2, 2:]
                    # -> array([[3, 4],
                    #           [7, 8]])
                </code-block>
                <list>
                    <li>2차원 배열에서도 범위 색인을 지정할 수 있습니다.</li>
                    <li>한 차원에서 인덱스 색인을 사용하면, 1차원 결과가 생성됩니다.</li>
                    <li>두 차원 모두 범위 색인을 사용하면, 2차원 결과가 생성됩니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>

    <chapter title="fancy 인덱싱">
        <procedure>
            <step>
                <code-block lang="python">
                    arr = np.array([10, 23, 2, 7, 90, 65, 32, 66, 70])

                    arr[[1, 3, 5]]
                    # -> array([23, 7, 65])
                </code-block>
                <list>
                    <li>fancy 인덱싱은 범위가 아니라 특정 인덱스의 집합의 값을 선택하여 추출합니다.</li>
                    <li>추출하고 싶은 인덱스의 리스트를 제시해 주면, 해당 인덱스의 요소로 구성된 ndarray 가 반환됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    idx = [1, 3, 5]
                    arr[idx]
                    # -> array([23, 7, 65])
                </code-block>
                <list>
                    <li>추출할 리스트를 변수로 선언하고, 해당 변수를 꺽쇠 안에 지정해주는 것으로도 적용이 가능합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    arr2d = np.array([[1, 2, 3, 4,
                    [5, 6, 7, 8,
                    [9, 10, 11, 12]])
                    arr2d[[0, 1], :]
                    # -> array([[1, 2, 3, 4],
                    #           [5, 6, 7, 8]])

                    arr2d[:, [1, 2, 3]]
                    # -> array([[2, 3, 4],
                    #           [6, 7, 8],
                    #           [10, 11, 12]])
                </code-block>
                <list>
                    <li>2차원 배열에서도 동일하게 fancy 인덱스를 적용할 수 있습니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>
</topic>