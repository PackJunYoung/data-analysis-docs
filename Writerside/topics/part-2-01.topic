<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Ch 01. pandas" id="part-2-01">

    <chapter title="series와 dataframe">
        <procedure>
            <step>
                <code-block lang="python">
                    import pandas
                </code-block>
                <list>
                    <li>판다스를 사용하려면 먼저 임포트가 필요합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    import pandas pd

                    pd
                </code-block>
                <list>
                    <li>판다스의 별칭은 pd 입니다.</li>
                    <li>pd를 입력하면, 판다스가 정상적으로 임포트되었는지 확인할 수 있습니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="Series">
            <step>
                <code-block lang="python">
                    pd.Series([1, 2, 3, 4])
                </code-block>
                <list>
                    <li>시리즈는 1차원 또는 1개의 컬럼을 말합니다.</li>
                    <li>pd.Series 함수를 사용하여 생성할 수 있습니다.</li>
                    <li>매개변수로는 리스트가 전달됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    a = [1, 2, 3, 4]
                    pd.Series(a)
                </code-block>
                <list>
                    <li>리스트를 담고 있는 변수를 전달하는 것도 역시 가능합니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="DataFrame">
            <step>
                <code-block lang="python">
                    company1 = [['삼성', 2000, '스마트폰'],
                                ['현대', 1000, '자동차],
                                ['네이버', 500, '포털']]
                    pd.DataFrame(company1)
                </code-block>
                <list>
                    <li>DataFrame은 행과 열로 이루어진 2차원 데이터 구조로 엑셀 시트와 유사한 형태를 가집니다.</li>
                    <li>pd.DataFrame 함수를 사용하여 생성할 수 있습니다.</li>
                    <li>매개변수로는 2차원 리스트가 전달됩니다.</li>
                </list>
            </step>
            <step>
                <img alt="2-01-01.png" src="2-01-01.png"/>
                <list>
                    <li>결과로 엑셀 시트와 유사한 표가 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df1 = pd.DataFrame(company1)
                    df1
                </code-block>
                <list>
                    <li>함수의 결과를 변수에 대입할 수 있습니다.</li>
                    <li>변수에 대입한 경우에는 결과가 출력되지 않고 변수를 호출할 경우 결과가 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df1.columns = ['기업명', '매출액', '업종']
                    df1
                </code-block>
                <img alt="2-01-02.png" src="2-01-02.png"/>
                <list>
                    <li>데이터 프레임이 할당된 변수의 columns 필드를 변경하여 컬럼명을 지정할 수 있습니다.</li>
                    <li>결과에서 숫자로만 출력되면 컬럼명이 지정된 것을 볼 수 있습니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="dict로 만들기">
            <step>
                <code-block lang="python">
                    company2 = {'기업명': ['삼성', '현대', '네이버'],
                                '매출액': [2000, 1000, 500],
                                '업종': ['스마트폰', '자동차', '포털']}
                    df2 = pd.DataFrame(company2)
                    df2
                </code-block>
                <img alt="2-01-03.png" src="2-01-03.png"/>
                <list>
                    <li>리스트가 아닌 딕셔너리를 전달하는 것으로도 데이터 프레임을 생성할 수 있습니다.</li>
                    <li>딕셔너리는 리스트와 다르게 열 기반의 데이터로 입력됩니다.</li>
                    <li>컬럼명이 딕셔너리의 키 값으로 바로 지정됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df1.index = df1['기업명']
                    df1
                </code-block>
                <img alt="2-01-04.png" src="2-01-04.png"/>
                <list>
                    <li>데이터 프레임의 index 필드를 변경하여 표의 인덱스를 변경할 수 있습니다.</li>
                    <li>기존에 숫자로만 표기되던 인덱스가 지정한 기업명으로 출력되는 것을 볼 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    type(df1['매출액'])
                    # -> pandas.core.series.Series

                    df1['매출액']
                </code-block>
                <img alt="2-01-05.png" src="2-01-05.png"/>
                <list>
                    <li>데이터 프레임에 딕셔너리처럼 키 인덱스로 접근하면 시리즈 결과를 가져올 수 있습니다.</li>
                    <li>매개변수는 컬럼명이고, 해당 컬럼의 값들을 시리즈로 가져옵니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>

    <chapter title="파일 읽어오기">
        <procedure title="CSV 파일 읽어오기">
            <step>
                <code-block lang="python">
                    import pandas as pd
                </code-block>
                <list>
                    <li>판다스를 먼저 임포트합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    from google.colab import files
                    myfile = files.upload()
                </code-block>
                <img alt="2-01-06.png" src="2-01-06.png"/>
                <list>
                    <li>upload 함수를 사용하여 파일을 가져오는 툴을 실행할 수 있습니다.</li>
                    <li>파일 선택을 통해 csv 파일을 선택하고, myfile 변수에 할당합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    import io
                    pd.read_csv(io.BytesIO(myfile['korean-idol.csv']))
                </code-block>
                <img alt="2-01-07.png" src="2-01-07.png"/>
                <list>
                    <li>read_csv 함수를 사용하여 csv 파일을 판다스로 읽어올 수 있습니다.</li>
                    <li>upload를 사용하여 가져온 파일은 BytesIO 처리가 필요합니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="구글 드라이브에서 읽어오기">
            <step>
                <code-block lang="python">
                    from google.colab import drive
                    drive.mount('/content/drive')
                </code-block>
                <img alt="2-01-08.png" src="2-01-08.png"/>
                <list>
                    <li>drive.mount 함수를 사용하여 구글 드라이브를 마운트합니다.</li>
                    <li>구글 드라이브 연동 팝업을 출력됩니다.</li>
                    <li>연동이 완료되면 파일 탭에서 구글 드라이브 파일들을 볼 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    filename = '/content/drive/MyDrive/korean-idol.csv'
                    pd.read_csv(filename)
                </code-block>
                <img alt="2-01-09.png" src="2-01-09.png"/>
                <list>
                    <li>파일 탭에서 주소복사 기능을 사용하여 주소를 가져올 수 있습니다.</li>
                    <li>동일하게 read_csv 함수를 사용하여 판다스로 읽어올 수 있습니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="엑셀 파일 읽어오기">
            <step>
                <code-block lang="python">
                    filename = '/content/drive/MyDrive/korean-idol.xlsx'
                    pd.read_excel(filename)
                </code-block>
                <list>
                    <li>csv 파일 말고 엑셀 파일도 읽어올 수 있습니다.</li>
                    <li>엑셀 파일은 read_excel 함수를 사용합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df = pd.read_excel(filename)
                </code-block>
                <list>
                    <li>판다스로 읽어온 결과를 변수에 할당하면 계속 활용할 수 있습니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>

    <chapter title="기본정보 알아보기">
        <procedure title="열과 행 정보 가져오기">
            <step>
                <code-block lang="python">
                    df.columns
                </code-block>
                <img alt="2-01-10.png" src="2-01-10.png"/>
                <list>
                    <li>columns 필드에 접근하여 열 이름을 출력할 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    new_col = ['name', '그룹', '소속사', '성별', '생년월일', '키', '혈액형', '브랜드평판지수']
                    df.columns = new_col
                    df.columns
                </code-block>
                <img alt="2-01-11.png" src="2-01-11.png"/>
                <list>
                    <li>columns 필드를 변경하여 열 이름을 재정의할 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.index
                </code-block>
                <img alt="2-01-12.png" src="2-01-12.png"/>
                <list>
                    <li>index 필드에 접근하여 행 정보를 출력할 수 있습니다.</li>
                    <li>행의 개수에 대한 정보가 RangeIndex 형태로 제공됩니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="다양한 정보 출력하기">
            <step>
                <code-block lang="python">
                    df.shape
                </code-block>
                <img alt="2-01-13.png" src="2-01-13.png"/>
                <list>
                    <li>shape 필드에 접근하여 행과 열의 상태를 출력합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.info()
                </code-block>
                <img alt="2-01-14.png" src="2-01-14.png"/>
                <list>
                    <li>info 매서드를 호출하면 해당 데이터 프레임의 정보가 출력됩니다.</li>
                    <li>데이터의 개수와 각 열의 데이터 타입에 대한 정보가 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.describe()
                </code-block>
                <img alt="2-01-15.png" src="2-01-15.png"/>
                <list>
                    <li>describe 매서드를 호출하면 해당 데이터 프레임의 다양한 통계 정보가 출력됩니다.</li>
                    <li>통계가 가능한 숫자형의 데이터 타입을 가진 열에만 적용됩니다.</li>
                    <li>평균이나 중위값 등 다양한 통계 결과값이 출력됩니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="일부 데이터만 출력하기">
            <step>
                <code-block lang="python">
                    df.head()
                </code-block>
                <img alt="2-01-16.png" src="2-01-16.png"/>
                <list>
                    <li>head 메서드를 호출하면 상위 데이터 5개만 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.tail()
                </code-block>
                <img alt="2-01-17.png" src="2-01-17.png"/>
                <list>
                    <li>tail 메서드를 호출하면 하위 데이터 5개만 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.head(3)
                </code-block>
                <img alt="2-01-18.png" src="2-01-18.png"/>
                <list>
                    <li>head 나 tail 매서드에 매개변수를 전달하면 일부 n 개의 데이터만 출력시킬 수 있습니다.</li>
                    <li>매개변수는 숫자이고, 해당 개수만큼의 데이터를 상위 또는 하위부터 출력합니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="정렬하기">
            <step>
                <code-block lang="python">
                    df.sort_index()
                </code-block>
                <img alt="2-01-19.png" src="2-01-19.png"/>
                <list>
                    <li>sort_index 매서드를 호출하면 인덱스로 오름차순 정렬한 결과가 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.sort_index(ascending=False)
                </code-block>
                <img alt="2-01-20.png" src="2-01-20.png"/>
                <list>
                    <li>sort_index 매서드를 호출하면서 ascending 매개변수를 False로 전달하면 인덱스를 내림차순 정렬한 결과가 출력됩니다.</li>
                    <li>True는 오름차순 정렬이며 기본값입니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.sort_values(by='키', ascending=True)
                </code-block>
                <img alt="2-01-21.png" src="2-01-21.png"/>
                <list>
                    <li>sort_values 매서드를 호출하면 특정 열 값에 대해 정렬을 수행할 수 있습니다.</li>
                    <li>by 매개변수에 기준이 될 열의 이름을 전달합니다.</li>
                    <li>ascending 매개변수로 정렬 방향이 결정되며, Nan으로 값이 없는 데이터는 항상 가장 하위로 정렬됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.sort_values(by=['키', '브랜드평판지수'], ascending=[False, True])
                </code-block>
                <img alt="2-01-22.png" src="2-01-22.png"/>
                <list>
                    <li>sort_values 매서드에 매개변수를 리스트 형태로 전달할 수 있습니다.</li>
                    <li>여러 컬럼에 대한 정렬을 적용하는 복수 정렬이 적용됩니다.</li>
                    <li>ascending 매개변수는 모든 열의 정렬 방향이 같은 방향이라면 하나의 값만 전달해줘도 됩니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>

    <chapter title="Selection">
        <procedure title="컬럼 선택">
            <step>
                <code-block lang="python">
                    import pandas as ps

                    df = pd.read_csv('/content/drive/MyDrive/korean-idol.csv')
                    df
                </code-block>
                <img alt="2-01-23.png" src="2-01-23.png"/>
                <list>
                    <li>실습에 사용할 데이터를 읽어옵니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df['이름']
                </code-block>
                <img alt="2-01-24.png" src="2-01-24.png"/>
                <list>
                    <li>인덱싱 형태의 접근을 통해 해당 열의 데이터를 가져올 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df["이름"]
                    df.이름
                </code-block>
                <list>
                    <li>위와 같은 코드도 동일한 결과를 출력합니다.</li>
                    <li>하지만, .을 통해 접근하는 방식은 추천되지 않습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    type(df['혈액형'])
                </code-block>
                <img alt="2-01-25.png" src="2-01-25.png"/>
                <list>
                    <li>한 개의 열 데이터만 가져온 결과는 시리즈 타입입니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="범위 선택">
            <step>
                <code-block lang="python">
                    df[:3]
                </code-block>
                <img alt="2-01-26.png" src="2-01-26.png"/>
                <list>
                    <li>numpy와 유사한 방식으로 특정 범위의 데이터를 가져올 수 있습니다.</li>
                    <li>head 매서드를 대신 사용할수도 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.loc[:, '이름']
                </code-block>
                <img alt="2-01-27.png" src="2-01-27.png"/>
                <list>
                    <li>loc 필드의 인덱싱 접근을 통해 일부 데이터만 가져올 수 있습니다.</li>
                    <li>첫 번째 매개변수는 행에 대한 범위이고, 두 번째 매개변수는 가져올 열입니다.</li>
                    <li>한 개의 열만 가져올 경우 결과는 시리즈가 됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.loc[:, ['이름', '생년월일']]
                </code-block>
                <img alt="2-01-28.png" src="2-01-28.png"/>
                <list>
                    <li>두 번째 매개변수를 리스트로 전달하여 여러개의 열을 가진 결과를 가져올 수 있습니다.</li>
                    <li>두 개 이상의 열을 가질 경우 결과는 데이터 프레임이 됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.loc[3:8, ['이름', '생년월일']]
                </code-block>
                <img alt="2-01-29.png" src="2-01-29.png"/>
                <list>
                    <li>첫 번째 매개변수는 numpy처럼 범위 인덱싱을 지정할 수 있습니다.</li>
                    <li>하지만 loc에서는 numpy와 다르게 결과에 마지막 인덱스까지 포함합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.loc[2:5, '이름':'생년월일']
                </code-block>
                <img alt="2-01-30.png" src="2-01-30.png"/>
                <list>
                    <li>두 번째 매개변수도 범위 인덱스로 지정이 가능합니다.</li>
                    <li>역시 결과에 마지막 인덱스까지 포함됩니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="iloc">
            <step>
                <code-block lang="python">
                    df.iloc[:, [0, 2]]
                </code-block>
                <img alt="2-01-31.png" src="2-01-31.png"/>
                <list>
                    <li>iloc는 loc와 다르게 두 번째 매개변수를 인덱스로 지정합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.iloc[1:5, 1:4]
                </code-block>
                <img alt="2-01-32.png" src="2-01-32.png"/>
                <list>
                    <li>역시 범위 인덱싱으로도 적용이 가능합니다.</li>
                    <li>하지만 loc와는 다르게 numpy처럼 마지막 인덱싱은 포함하지 않습니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="조건을 활용한 색인">
            <step>
                <code-block lang="python">
                    df['키'] > 180
                </code-block>
                <img alt="2-01-33.png" src="2-01-33.png"/>
                <list>
                    <li>특정 컬럼에 대한 조건을 입력하면, 결과로 불리언 시리즈가 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df[df['키'] > 180]
                </code-block>
                <img alt="2-01-34.png" src="2-01-34.png"/>
                <list>
                    <li>데이터 프레임에 조건을 인덱싱하면, 해당 조건에 부합하는 데이터만 출력됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.loc[df['키'] > 180, ['이름', '키']]
                </code-block>
                <img alt="2-01-35.png" src="2-01-35.png"/>
                <list>
                    <li>loc를 사용하여 특정 컬럼만 출력이 가능합니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="isin을 활용한 색인">
            <step>
                <code-block lang="python">
                    my_condition = ['플레디스', 'SM']
                    df['소속사'].isin(my_condition)
                </code-block>
                <img alt="2-01-36.png" src="2-01-36.png"/>
                <list>
                    <li>isin 매서드를 사용하면 특정 조건의 값인지 검사가 가능합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.loc[df['소속사'].isin(my_condition), ['이름', '그룹']]
                </code-block>
                <img alt="2-01-37.png" src="2-01-37.png"/>
                <list>
                    <li>loc의 조건으로 사용하여 특정 범위의 데이터만 출력할 수 있습니다.</li>
                </list>
            </step>
        </procedure>
        <procedure title="결측값 알아보기">
            <step>
                <code-block lang="python">
                    df.info()
                </code-block>
                <img alt="2-01-38.png" src="2-01-38.png"/>
                <list>
                    <li>info 매서드의 결과를 통해 각 컬럼에 null인 값이 얼마나 존재하는지 확인이 가능합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.isna()
                </code-block>
                <img alt="2-01-39.png" src="2-01-39.png"/>
                <list>
                    <li>isna 메서드를 호출하면, 널 값을 가진 데이터의 위치를 확인할 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df['그룹'].isnull()
                </code-block>
                <img alt="2-01-40.png" src="2-01-40.png"/>
                <list>
                    <li>컬럼에 대해 널 값을 검사할 때에는 isnull 매서드를 사용할 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df[df['그룹'].isnull()]
                </code-block>
                <img alt="2-01-41.png" src="2-01-41.png"/>
                <list>
                    <li>데이터 프레임에 조건 필터링으로 사용할 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df[df['그룹'].notnull()]
                </code-block>
                <img alt="2-01-42.png" src="2-01-42.png"/>
                <list>
                    <li>널이 아닌 값만 추출하기 위해서는 notnull 매서드를 사용합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="python">
                    df.loc[df['그룹'].notnull(), ['이름', '소속사']]
                </code-block>
                <img alt="2-01-43.png" src="2-01-43.png"/>
                <list>
                    <li>loc를 사용하여 특정 범위의 데이터만 추출할 수 있습니다.</li>
                </list>
            </step>
        </procedure>
    </chapter>
</topic>